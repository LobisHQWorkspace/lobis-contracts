{
  "address": "0xf8a5b15E7C96ed29c1cC4a594fdAB5F0C60C8266",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_LOBI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_partnerDAO",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "BondPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "BondRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "addition",
          "type": "bool"
        }
      ],
      "name": "ControlVariableAdjustment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPulled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPushed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOBI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adjustment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vesting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decay_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feePartner",
          "type": "uint256"
        }
      ],
      "name": "initializeBondTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "partnerDAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "pendingPayoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingPayout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "percentVestedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentVested_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "principle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "pushManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "recoverLostToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_addition",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_increment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buffer",
          "type": "uint256"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LpBondDepository.PARAMETER",
          "name": "_parameter",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_input",
          "type": "uint256"
        }
      ],
      "name": "setBondTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_DAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_partnerDAO",
          "type": "address"
        }
      ],
      "name": "setDAOs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_helper",
          "type": "bool"
        }
      ],
      "name": "setStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingHelper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feePartner",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useHelper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb2c676897e85a13362ce7afa98fca39682b810b1a91980eb8d30388d260da07",
  "receipt": {
    "to": null,
    "from": "0xBa9ebdC5054A206b3D54D7cb7E7a5ABd2810F6fe",
    "contractAddress": "0xf8a5b15E7C96ed29c1cC4a594fdAB5F0C60C8266",
    "transactionIndex": 213,
    "gasUsed": "2288707",
    "logsBloom": "0x
    "blockHash": "0xd6cc8844871a03e2ceedddcccc8dcb2ec1b686e7d19dd9398c7a58780c93be2e",
    "transactionHash": "0xdb2c676897e85a13362ce7afa98fca39682b810b1a91980eb8d30388d260da07",
    "logs": [
      {
        "transactionIndex": 213,
        "blockNumber": 13843502,
        "transactionHash": "0xdb2c676897e85a13362ce7afa98fca39682b810b1a91980eb8d30388d260da07",
        "address": "0xf8a5b15E7C96ed29c1cC4a594fdAB5F0C60C8266",
        "topics": [
          "0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ba9ebdc5054a206b3d54d7cb7e7a5abd2810f6fe"
        ],
        "data": "0x",
        "logIndex": 246,
        "blockHash": "0xd6cc8844871a03e2ceedddcccc8dcb2ec1b686e7d19dd9398c7a58780c93be2e"
      }
    ],
    "blockNumber": 13843502,
    "cumulativeGasUsed": "16957408",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDEc41Db0c33F3F6f3cb615449C311ba22D418A8d",
    "0x193008EAAde86658Df8237A436261e23e3BcBbAa",
    "0x873ad91fA4F2aA0d557C0919eC3F6c9D240cDd05",
    "0xDe50fb295549EdA934D222e7a24d5A8dd132444F",
    "0x245cc372C84B3645Bf0Ffe6538620B04a217988B"
  ],
  "solcInputHash": "a8fed566949da193470fae851cf88380",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LOBI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partnerDAO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOBI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePartner\",\"type\":\"uint256\"}],\"name\":\"initializeBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LpBondDepository.PARAMETER\",\"name\":\"_parameter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partnerDAO\",\"type\":\"address\"}],\"name\":\"setDAOs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_helper\",\"type\":\"bool\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePartner\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice()\":{\"returns\":{\"price_\":\"uint\"}},\"currentDebt()\":{\"returns\":{\"_0\":\"uint\"}},\"debtDecay()\":{\"returns\":{\"decay_\":\"uint\"}},\"debtRatio()\":{\"returns\":{\"debtRatio_\":\"uint\"}},\"deposit(uint256,uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_depositor\":\"address\",\"_maxPrice\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_controlVariable\":\"uint\",\"_initialDebt\":\"uint\",\"_maxDebt\":\"uint\",\"_maxPayout\":\"uint\",\"_minimumPrice\":\"uint\",\"_vestingTerm\":\"uint\"}},\"maxPayout()\":{\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256)\":{\"params\":{\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"pendingPayoutFor(address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"pendingPayout_\":\"uint\"}},\"percentVestedFor(address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"percentVested_\":\"uint\"}},\"recoverLostToken(address)\":{\"returns\":{\"_0\":\"bool\"}},\"redeem(address,bool)\":{\"params\":{\"_recipient\":\"address\",\"_stake\":\"bool\"},\"returns\":{\"_0\":\"uint\"}},\"setAdjustment(bool,uint256,uint256,uint256)\":{\"params\":{\"_addition\":\"bool\",\"_buffer\":\"uint\",\"_increment\":\"uint\",\"_target\":\"uint\"}},\"setBondTerms(uint8,uint256)\":{\"params\":{\"_input\":\"uint\",\"_parameter\":\"PARAMETER\"}},\"setStaking(address,bool)\":{\"params\":{\"_helper\":\"bool\",\"_staking\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bondPrice()\":{\"notice\":\"calculate current bond premium\"},\"currentDebt()\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay()\":{\"notice\":\"amount to decay total debt by\"},\"debtRatio()\":{\"notice\":\"calculate current ratio of debt to LOBI supply\"},\"deposit(uint256,uint256,address)\":{\"notice\":\"deposit bond\"},\"initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"initializes bond parameters\"},\"maxPayout()\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256)\":{\"notice\":\"calculate interest due for new bond\"},\"pendingPayoutFor(address)\":{\"notice\":\"calculate amount of LOBI available for claim by depositor\"},\"percentVestedFor(address)\":{\"notice\":\"calculate how far into vesting a depositor is\"},\"recoverLostToken(address)\":{\"notice\":\"allow anyone to send lost tokens (excluding principle or LOBI) to the DAO\"},\"redeem(address,bool)\":{\"notice\":\"redeem bond for user\"},\"setAdjustment(bool,uint256,uint256,uint256)\":{\"notice\":\"set control variable adjustment\"},\"setBondTerms(uint8,uint256)\":{\"notice\":\"set parameters for new bonds\"},\"setStaking(address,bool)\":{\"notice\":\"set contract for auto stake\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LpBondDepository.sol\":\"LpBondDepository\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/LpBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\ninterface IOwnable {\\n  function policy() external view returns (address);\\n\\n  function renounceManagement() external;\\n\\n  function pushManagement(address newOwner_) external;\\n\\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n  address internal _owner;\\n  address internal _newOwner;\\n\\n  event OwnershipPushed(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n  event OwnershipPulled(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  constructor() {\\n    _owner = msg.sender;\\n    emit OwnershipPushed(address(0), _owner);\\n  }\\n\\n  function policy() public view override returns (address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyPolicy() {\\n    require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  function renounceManagement() public virtual override onlyPolicy {\\n    emit OwnershipPushed(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  function pushManagement(address newOwner_)\\n    public\\n    virtual\\n    override\\n    onlyPolicy\\n  {\\n    require(newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipPushed(_owner, newOwner_);\\n    _newOwner = newOwner_;\\n  }\\n\\n  function pullManagement() public virtual override {\\n    require(msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n    emit OwnershipPulled(_owner, _newOwner);\\n    _owner = _newOwner;\\n  }\\n}\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n    if (a > 3) {\\n      c = a;\\n      uint256 b = add(div(a, 2), 1);\\n      while (b < c) {\\n        c = b;\\n        b = div(add(div(a, b), b), 2);\\n      }\\n    } else if (a != 0) {\\n      c = 1;\\n    }\\n  }\\n}\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    uint256 size;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n      data\\n    );\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      if (returndata.length > 0) {\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function addressToString(address _address)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes32 _bytes = bytes32(uint256(_address));\\n    bytes memory HEX = \\\"0123456789abcdef\\\";\\n    bytes memory _addr = new bytes(42);\\n\\n    _addr[0] = \\\"0\\\";\\n    _addr[1] = \\\"x\\\";\\n\\n    for (uint256 i = 0; i < 20; i++) {\\n      _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n      _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n    }\\n\\n    return string(_addr);\\n  }\\n}\\n\\ninterface IERC20 {\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract ERC20 is IERC20 {\\n  using SafeMath for uint256;\\n\\n  // TODO comment actual hash value.\\n  bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID =\\n    keccak256(\\\"ERC20Token\\\");\\n\\n  mapping(address => uint256) internal _balances;\\n\\n  mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n  uint256 internal _totalSupply;\\n\\n  string internal _name;\\n\\n  string internal _symbol;\\n\\n  uint8 internal _decimals;\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _decimals = decimals_;\\n  }\\n\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _balances[account];\\n  }\\n\\n  function transfer(address recipient, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    _transfer(msg.sender, recipient, amount);\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function approve(address spender, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    _approve(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      msg.sender,\\n      _allowances[sender][msg.sender].sub(\\n        amount,\\n        \\\"ERC20: transfer amount exceeds allowance\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      _allowances[msg.sender][spender].add(addedValue)\\n    );\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      _allowances[msg.sender][spender].sub(\\n        subtractedValue,\\n        \\\"ERC20: decreased allowance below zero\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(\\n      amount,\\n      \\\"ERC20: transfer amount exceeds balance\\\"\\n    );\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _mint(address account_, uint256 ammount_) internal virtual {\\n    require(account_ != address(0), \\\"ERC20: mint to the zero address\\\");\\n    _beforeTokenTransfer(address(this), account_, ammount_);\\n    _totalSupply = _totalSupply.add(ammount_);\\n    _balances[account_] = _balances[account_].add(ammount_);\\n    emit Transfer(address(this), account_, ammount_);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(\\n      amount,\\n      \\\"ERC20: burn amount exceeds balance\\\"\\n    );\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from_,\\n    address to_,\\n    uint256 amount_\\n  ) internal virtual {}\\n}\\n\\ninterface IERC2612Permit {\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function nonces(address owner) external view returns (uint256);\\n}\\n\\nlibrary Counters {\\n  using SafeMath for uint256;\\n\\n  struct Counter {\\n    uint256 _value; // default: 0\\n  }\\n\\n  function current(Counter storage counter) internal view returns (uint256) {\\n    return counter._value;\\n  }\\n\\n  function increment(Counter storage counter) internal {\\n    counter._value += 1;\\n  }\\n\\n  function decrement(Counter storage counter) internal {\\n    counter._value = counter._value.sub(1);\\n  }\\n}\\n\\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\\n  using Counters for Counters.Counter;\\n\\n  mapping(address => Counters.Counter) private _nonces;\\n\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n\\n  constructor() {\\n    uint256 chainID;\\n    assembly {\\n      chainID := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\n          \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        ),\\n        keccak256(bytes(name())),\\n        keccak256(bytes(\\\"1\\\")), // Version\\n        chainID,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public virtual override {\\n    require(block.timestamp <= deadline, \\\"Permit: expired deadline\\\");\\n\\n    bytes32 hashStruct = keccak256(\\n      abi.encode(\\n        PERMIT_TYPEHASH,\\n        owner,\\n        spender,\\n        amount,\\n        _nonces[owner].current(),\\n        deadline\\n      )\\n    );\\n\\n    bytes32 _hash = keccak256(\\n      abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct)\\n    );\\n\\n    address signer = ecrecover(_hash, v, r, s);\\n    require(\\n      signer != address(0) && signer == owner,\\n      \\\"ZeroSwapPermit: Invalid signature\\\"\\n    );\\n\\n    _nonces[owner].increment();\\n    _approve(owner, spender, amount);\\n  }\\n\\n  function nonces(address owner) public view override returns (uint256) {\\n    return _nonces[owner].current();\\n  }\\n}\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(\\n      data,\\n      \\\"SafeERC20: low-level call failed\\\"\\n    );\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\\nlibrary FullMath {\\n  function fullMul(uint256 x, uint256 y)\\n    private\\n    pure\\n    returns (uint256 l, uint256 h)\\n  {\\n    uint256 mm = mulmod(x, y, uint256(-1));\\n    l = x * y;\\n    h = mm - l;\\n    if (mm < l) h -= 1;\\n  }\\n\\n  function fullDiv(\\n    uint256 l,\\n    uint256 h,\\n    uint256 d\\n  ) private pure returns (uint256) {\\n    uint256 pow2 = d & -d;\\n    d /= pow2;\\n    l /= pow2;\\n    l += h * ((-pow2) / pow2 + 1);\\n    uint256 r = 1;\\n    r *= 2 - d * r;\\n    r *= 2 - d * r;\\n    r *= 2 - d * r;\\n    r *= 2 - d * r;\\n    r *= 2 - d * r;\\n    r *= 2 - d * r;\\n    r *= 2 - d * r;\\n    r *= 2 - d * r;\\n    return l * r;\\n  }\\n\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 d\\n  ) internal pure returns (uint256) {\\n    (uint256 l, uint256 h) = fullMul(x, y);\\n    uint256 mm = mulmod(x, y, d);\\n    if (mm > l) h -= 1;\\n    l -= mm;\\n    require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n    return fullDiv(l, h, d);\\n  }\\n}\\n\\nlibrary FixedPoint {\\n  struct uq112x112 {\\n    uint224 _x;\\n  }\\n\\n  struct uq144x112 {\\n    uint256 _x;\\n  }\\n\\n  uint8 private constant RESOLUTION = 112;\\n  uint256 private constant Q112 = 0x10000000000000000000000000000;\\n  uint256 private constant Q224 =\\n    0x100000000000000000000000000000000000000000000000000000000;\\n  uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\\n    return uint112(self._x >> RESOLUTION);\\n  }\\n\\n  function decode112with18(uq112x112 memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return uint256(self._x) / 5192296858534827;\\n  }\\n\\n  function fraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (uq112x112 memory)\\n  {\\n    require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n    if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n    if (numerator <= uint144(-1)) {\\n      uint256 result = (numerator << RESOLUTION) / denominator;\\n      require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    } else {\\n      uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n      require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    }\\n  }\\n}\\n\\ninterface ITreasury {\\n  function deposit(\\n    uint256 _amount,\\n    address _token,\\n    uint256 _profit\\n  ) external returns (bool);\\n\\n  function updateReserve(address _token, uint256 _amount) external;\\n\\n  function valueOfToken(address _token, uint256 _amount)\\n    external\\n    view\\n    returns (uint256 value_);\\n\\n  function mintRewards(address _recipient, uint256 _amount) external;\\n}\\n\\ninterface IStaking {\\n  function stake(uint256 _amount, address _recipient) external returns (bool);\\n}\\n\\ninterface IStakingHelper {\\n  function stake(uint256 _amount, address _recipient) external;\\n}\\n\\ncontract LpBondDepository is Ownable {\\n  using FixedPoint for *;\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  /* ======== EVENTS ======== */\\n\\n  event BondCreated(\\n    uint256 deposit,\\n    uint256 indexed payout,\\n    uint256 indexed expires,\\n    uint256 indexed priceInUSD\\n  );\\n  event BondRedeemed(\\n    address indexed recipient,\\n    uint256 payout,\\n    uint256 remaining\\n  );\\n  event BondPriceChanged(\\n    uint256 indexed priceInUSD,\\n    uint256 indexed internalPrice,\\n    uint256 indexed debtRatio\\n  );\\n  event ControlVariableAdjustment(\\n    uint256 initialBCV,\\n    uint256 newBCV,\\n    uint256 adjustment,\\n    bool addition\\n  );\\n\\n  /* ======== STATE VARIABLES ======== */\\n\\n  address public immutable LOBI; // token given as payment for bond\\n  address public immutable principle; // token used to create bond\\n  address public immutable treasury; // mints LOBI when receives principle\\n  address public DAO; // receives profit share from bond\\n  address public partnerDAO; // receives profit share from bond\\n\\n  address public staking; // to auto-stake payout\\n  address public stakingHelper; // to stake and claim if no staking warmup\\n  bool public useHelper;\\n\\n  Terms public terms; // stores terms for new bonds\\n  Adjust public adjustment; // stores adjustment to BCV data\\n\\n  mapping(address => Bond) public bondInfo; // stores bond information for depositors\\n\\n  uint256 public totalDebt; // total value of outstanding bonds; used for pricing\\n  uint256 public lastDecay; // reference block for debt decay\\n\\n  /* ======== STRUCTS ======== */\\n\\n  // Info for creating new bonds\\n  struct Terms {\\n    uint256 controlVariable; // scaling variable for price\\n    uint256 vestingTerm; // in blocks\\n    uint256 minimumPrice; // vs principle value. 4 decimals (1500 = 0.15)\\n    uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n    uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n    uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n    uint256 feePartner; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n  }\\n\\n  // Info for bond holder\\n  struct Bond {\\n    uint256 payout; // LOBI remaining to be paid\\n    uint256 vesting; // Blocks left to vest\\n    uint256 lastBlock; // Last interaction\\n    uint256 pricePaid; // In DAI, for front end viewing\\n  }\\n\\n  // Info for incremental adjustments to control variable\\n  struct Adjust {\\n    bool add; // addition or subtraction\\n    uint256 rate; // increment\\n    uint256 target; // BCV when adjustment finished\\n    uint256 buffer; // minimum length (in blocks) between adjustments\\n    uint256 lastBlock; // block when last adjustment made\\n  }\\n\\n  /* ======== INITIALIZATION ======== */\\n\\n  constructor(\\n    address _LOBI,\\n    address _principle,\\n    address _treasury,\\n    address _DAO,\\n    address _partnerDAO\\n  ) {\\n    require(_LOBI != address(0));\\n    LOBI = _LOBI;\\n    require(_principle != address(0));\\n    principle = _principle;\\n    require(_treasury != address(0));\\n    treasury = _treasury;\\n    require(_DAO != address(0));\\n    DAO = _DAO;\\n    require(_partnerDAO != address(0));\\n    partnerDAO = _partnerDAO;\\n  }\\n\\n  /**\\n   *  @notice initializes bond parameters\\n   *  @param _controlVariable uint\\n   *  @param _vestingTerm uint\\n   *  @param _minimumPrice uint\\n   *  @param _maxPayout uint\\n   *  @param _maxDebt uint\\n   *  @param _initialDebt uint\\n   */\\n  function initializeBondTerms(\\n    uint256 _controlVariable,\\n    uint256 _vestingTerm,\\n    uint256 _minimumPrice,\\n    uint256 _maxPayout,\\n    uint256 _maxDebt,\\n    uint256 _initialDebt,\\n    uint256 _fee,\\n    uint256 _feePartner\\n  ) external onlyPolicy {\\n    terms = Terms({\\n      controlVariable: _controlVariable,\\n      vestingTerm: _vestingTerm,\\n      minimumPrice: _minimumPrice,\\n      maxPayout: _maxPayout,\\n      maxDebt: _maxDebt,\\n      fee: _fee,\\n      feePartner: _feePartner\\n    });\\n    totalDebt = _initialDebt;\\n    lastDecay = block.number;\\n  }\\n\\n  /* ======== POLICY FUNCTIONS ======== */\\n\\n  enum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    DEBT,\\n    FEE,\\n    FEEPARTNER\\n  }\\n\\n  /**\\n   *  @notice set parameters for new bonds\\n   *  @param _parameter PARAMETER\\n   *  @param _input uint\\n   */\\n  function setBondTerms(PARAMETER _parameter, uint256 _input)\\n    external\\n    onlyPolicy\\n  {\\n    if (_parameter == PARAMETER.VESTING) {\\n      // 0\\n      require(_input >= 10000, \\\"Vesting must be longer than 36 hours\\\");\\n      terms.vestingTerm = _input;\\n    } else if (_parameter == PARAMETER.PAYOUT) {\\n      // 1\\n      require(_input <= 1000, \\\"Payout cannot be above 1 percent\\\");\\n      terms.maxPayout = _input;\\n    } else if (_parameter == PARAMETER.DEBT) {\\n      // 2\\n      terms.maxDebt = _input;\\n    } else if (_parameter == PARAMETER.FEE) {\\n      // 3\\n      terms.fee = _input;\\n    } else if (_parameter == PARAMETER.FEEPARTNER) {\\n      // 3\\n      terms.feePartner = _input;\\n    }\\n  }\\n\\n  /**\\n   *  @notice set control variable adjustment\\n   *  @param _addition bool\\n   *  @param _increment uint\\n   *  @param _target uint\\n   *  @param _buffer uint\\n   */\\n  function setAdjustment(\\n    bool _addition,\\n    uint256 _increment,\\n    uint256 _target,\\n    uint256 _buffer\\n  ) external onlyPolicy {\\n    require(\\n      _increment <= terms.controlVariable.mul(25).div(1000),\\n      \\\"Increment too large\\\"\\n    );\\n\\n    adjustment = Adjust({\\n      add: _addition,\\n      rate: _increment,\\n      target: _target,\\n      buffer: _buffer,\\n      lastBlock: block.number\\n    });\\n  }\\n\\n  /**\\n   *  @notice set contract for auto stake\\n   *  @param _staking address\\n   *  @param _helper bool\\n   */\\n  function setStaking(address _staking, bool _helper) external onlyPolicy {\\n    require(_staking != address(0));\\n    if (_helper) {\\n      useHelper = true;\\n      stakingHelper = _staking;\\n    } else {\\n      useHelper = false;\\n      staking = _staking;\\n    }\\n  }\\n\\n  /* ======== USER FUNCTIONS ======== */\\n\\n  /**\\n   *  @notice deposit bond\\n   *  @param _amount uint\\n   *  @param _maxPrice uint\\n   *  @param _depositor address\\n   *  @return uint\\n   */\\n  function deposit(\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _depositor\\n  ) external returns (uint256) {\\n    require(_depositor != address(0), \\\"Invalid address\\\");\\n\\n    decayDebt();\\n    require(totalDebt <= terms.maxDebt, \\\"Max capacity reached\\\");\\n\\n    uint256 priceInUSD = _bondPrice();\\n    uint256 nativePrice = _bondPrice();\\n\\n    require(_maxPrice >= nativePrice, \\\"Slippage limit: more than max price\\\"); // slippage protection\\n\\n    uint256 value = ITreasury(treasury).valueOfToken(principle, _amount);\\n    uint256 payout = payoutFor(value); // payout to bonder is computed\\n\\n    require(payout >= 10000000, \\\"Bond too small\\\"); // must be > 0.01 LOBI ( underflow protection )\\n    require(payout <= maxPayout(), \\\"Bond too large\\\"); // size protection because there is no slippage\\n\\n    // profits are calculated\\n    uint256 fee = payout.mul(terms.fee).div(10000);\\n    uint256 feePartner = payout.mul(terms.feePartner).div(10000);\\n\\n    /**\\n            asset carries risk and is not minted against\\n            asset transfered to treasury and rewards minted as payout\\n         */\\n    IERC20(principle).safeTransferFrom(msg.sender, treasury, _amount);\\n\\n    ITreasury(treasury).updateReserve(principle, value);\\n    ITreasury(treasury).mintRewards(\\n      address(this),\\n      payout.add(fee).add(feePartner)\\n    );\\n\\n    if (fee != 0) {\\n      IERC20(LOBI).safeTransfer(DAO, fee);\\n    }\\n\\n    if (feePartner != 0) {\\n      IERC20(LOBI).safeTransfer(partnerDAO, feePartner);\\n    }\\n\\n    // total debt is increased\\n    totalDebt = totalDebt.add(value);\\n\\n    // depositor info is stored\\n    bondInfo[_depositor] = Bond({\\n      payout: bondInfo[_depositor].payout.add(payout),\\n      vesting: terms.vestingTerm,\\n      lastBlock: block.number,\\n      pricePaid: priceInUSD\\n    });\\n\\n    // indexed events are emitted\\n    emit BondCreated(\\n      _amount,\\n      payout,\\n      block.number.add(terms.vestingTerm),\\n      priceInUSD\\n    );\\n    emit BondPriceChanged(_bondPrice(), _bondPrice(), debtRatio());\\n\\n    adjust(); // control variable is adjusted\\n    return payout;\\n  }\\n\\n  /**\\n   *  @notice redeem bond for user\\n   *  @param _recipient address\\n   *  @param _stake bool\\n   *  @return uint\\n   */\\n  function redeem(address _recipient, bool _stake) external returns (uint256) {\\n    Bond memory info = bondInfo[_recipient];\\n    uint256 percentVested = percentVestedFor(_recipient); // (blocks since last interaction / vesting term remaining)\\n\\n    if (percentVested >= 10000) {\\n      // if fully vested\\n      delete bondInfo[_recipient]; // delete user info\\n      emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\\n      return stakeOrSend(_recipient, _stake, info.payout); // pay user everything due\\n    } else {\\n      // if unfinished\\n      // calculate payout vested\\n      uint256 payout = info.payout.mul(percentVested).div(10000);\\n\\n      // store updated deposit info\\n      bondInfo[_recipient] = Bond({\\n        payout: info.payout.sub(payout),\\n        vesting: info.vesting.sub(block.number.sub(info.lastBlock)),\\n        lastBlock: block.number,\\n        pricePaid: info.pricePaid\\n      });\\n\\n      emit BondRedeemed(_recipient, payout, bondInfo[_recipient].payout);\\n      return stakeOrSend(_recipient, _stake, payout);\\n    }\\n  }\\n\\n  /* ======== INTERNAL HELPER FUNCTIONS ======== */\\n\\n  /**\\n   *  @notice allow user to stake payout automatically\\n   *  @param _stake bool\\n   *  @param _amount uint\\n   *  @return uint\\n   */\\n  function stakeOrSend(\\n    address _recipient,\\n    bool _stake,\\n    uint256 _amount\\n  ) internal returns (uint256) {\\n    if (!_stake) {\\n      // if user does not want to stake\\n      IERC20(LOBI).transfer(_recipient, _amount); // send payout\\n    } else {\\n      // if user wants to stake\\n      if (useHelper) {\\n        // use if staking warmup is 0\\n        IERC20(LOBI).approve(stakingHelper, _amount);\\n        IStakingHelper(stakingHelper).stake(_amount, _recipient);\\n      } else {\\n        IERC20(LOBI).approve(staking, _amount);\\n        IStaking(staking).stake(_amount, _recipient);\\n      }\\n    }\\n    return _amount;\\n  }\\n\\n  /**\\n   *  @notice makes incremental adjustment to control variable\\n   */\\n  function adjust() internal {\\n    uint256 blockCanAdjust = adjustment.lastBlock.add(adjustment.buffer);\\n    if (adjustment.rate != 0 && block.number >= blockCanAdjust) {\\n      uint256 initial = terms.controlVariable;\\n      if (adjustment.add) {\\n        terms.controlVariable = terms.controlVariable.add(adjustment.rate);\\n        if (terms.controlVariable >= adjustment.target) {\\n          adjustment.rate = 0;\\n        }\\n      } else {\\n        terms.controlVariable = terms.controlVariable.sub(adjustment.rate);\\n        if (terms.controlVariable <= adjustment.target) {\\n          adjustment.rate = 0;\\n        }\\n      }\\n      adjustment.lastBlock = block.number;\\n      emit ControlVariableAdjustment(\\n        initial,\\n        terms.controlVariable,\\n        adjustment.rate,\\n        adjustment.add\\n      );\\n    }\\n  }\\n\\n  /**\\n   *  @notice reduce total debt\\n   */\\n  function decayDebt() internal {\\n    totalDebt = totalDebt.sub(debtDecay());\\n    lastDecay = block.number;\\n  }\\n\\n  /* ======== VIEW FUNCTIONS ======== */\\n\\n  /**\\n   *  @notice determine maximum bond size\\n   *  @return uint\\n   */\\n  function maxPayout() public view returns (uint256) {\\n    return IERC20(LOBI).totalSupply().mul(terms.maxPayout).div(100000);\\n  }\\n\\n  /**\\n   *  @notice calculate interest due for new bond\\n   *  @param _value uint\\n   *  @return uint\\n   */\\n  function payoutFor(uint256 _value) public view returns (uint256) {\\n    return FixedPoint.fraction(_value, bondPrice()).decode112with18().div(1e14);\\n  }\\n\\n  /**\\n   *  @notice calculate current bond premium\\n   *  @return price_ uint\\n   */\\n  function bondPrice() public view returns (uint256 price_) {\\n    price_ = terms.controlVariable.mul(debtRatio()).div(1e5);\\n    if (price_ < terms.minimumPrice) {\\n      price_ = terms.minimumPrice;\\n    }\\n  }\\n\\n  /**\\n   *  @notice calculate current bond price and remove floor if above\\n   *  @return price_ uint\\n   */\\n  function _bondPrice() internal returns (uint256 price_) {\\n    price_ = terms.controlVariable.mul(debtRatio()).div(1e5);\\n    if (price_ < terms.minimumPrice) {\\n      price_ = terms.minimumPrice;\\n    } else if (terms.minimumPrice != 0) {\\n      terms.minimumPrice = 0;\\n    }\\n  }\\n\\n  /**\\n   *  @notice calculate current ratio of debt to LOBI supply\\n   *  @return debtRatio_ uint\\n   */\\n  function debtRatio() public view returns (uint256 debtRatio_) {\\n    uint256 supply = IERC20(LOBI).totalSupply();\\n    debtRatio_ = FixedPoint\\n      .fraction(currentDebt().mul(1e9), supply)\\n      .decode112with18()\\n      .div(1e18);\\n  }\\n\\n  /**\\n   *  @notice calculate debt factoring in decay\\n   *  @return uint\\n   */\\n  function currentDebt() public view returns (uint256) {\\n    return totalDebt.sub(debtDecay());\\n  }\\n\\n  /**\\n   *  @notice amount to decay total debt by\\n   *  @return decay_ uint\\n   */\\n  function debtDecay() public view returns (uint256 decay_) {\\n    uint256 blocksSinceLast = block.number.sub(lastDecay);\\n    decay_ = totalDebt.mul(blocksSinceLast).div(terms.vestingTerm);\\n    if (decay_ > totalDebt) {\\n      decay_ = totalDebt;\\n    }\\n  }\\n\\n  /**\\n   *  @notice calculate how far into vesting a depositor is\\n   *  @param _depositor address\\n   *  @return percentVested_ uint\\n   */\\n  function percentVestedFor(address _depositor)\\n    public\\n    view\\n    returns (uint256 percentVested_)\\n  {\\n    Bond memory bond = bondInfo[_depositor];\\n    uint256 blocksSinceLast = block.number.sub(bond.lastBlock);\\n    uint256 vesting = bond.vesting;\\n\\n    if (vesting > 0) {\\n      percentVested_ = blocksSinceLast.mul(10000).div(vesting);\\n    } else {\\n      percentVested_ = 0;\\n    }\\n  }\\n\\n  /**\\n   *  @notice calculate amount of LOBI available for claim by depositor\\n   *  @param _depositor address\\n   *  @return pendingPayout_ uint\\n   */\\n  function pendingPayoutFor(address _depositor)\\n    external\\n    view\\n    returns (uint256 pendingPayout_)\\n  {\\n    uint256 percentVested = percentVestedFor(_depositor);\\n    uint256 payout = bondInfo[_depositor].payout;\\n\\n    if (percentVested >= 10000) {\\n      pendingPayout_ = payout;\\n    } else {\\n      pendingPayout_ = payout.mul(percentVested).div(10000);\\n    }\\n  }\\n\\n  function setDAOs(address _DAO, address _partnerDAO) external onlyPolicy {\\n    DAO = _DAO;\\n    partnerDAO = _partnerDAO;\\n  }\\n\\n  /* ======= AUXILLIARY ======= */\\n\\n  /**\\n   *  @notice allow anyone to send lost tokens (excluding principle or LOBI) to the DAO\\n   *  @return bool\\n   */\\n  function recoverLostToken(address _token) external returns (bool) {\\n    require(_token != LOBI);\\n    require(_token != principle);\\n    IERC20(_token).safeTransfer(DAO, IERC20(_token).balanceOf(address(this)));\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x21ce1b6704cbc6d1e8060b91a7881dbc4615436a6282113f83ce3731b6ea1965\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c806377b818951161011a578063cd1234b3116100ad578063d7ccfb0b1161007c578063d7ccfb0b1461057d578063e0176de814610585578063e392a2621461058d578063f5c2ab5b14610595578063fc7b9c181461059d576101fb565b8063cd1234b3146104bb578063cea55f5714610507578063d4d863ce1461050f578063d50256251461053d576101fb565b806399286b59116100e957806399286b5914610457578063a5ffd1971461045f578063b4abccba14610467578063bfce3e0c1461048d576101fb565b806377b81895146103f85780637927ebf8146104005780638dbdbe6d1461041d57806398fabd3a1461044f576101fb565b80633283ad0e11610192578063507930ec11610161578063507930ec146103ba5780635a96ac0a146103e057806361d027b3146103e8578063759076e5146103f0576101fb565b80633283ad0e1461030f578063451ee4a11461035757806346f68ee91461038c5780634cf088d9146103b2576101fb565b80631a3d0068116101ce5780631a3d00681461026e5780631e321a0f1461029f5780631feed31f146102c55780632f3f470a146102f3576101fb565b8063016a42841461020057806301b88ee8146102245780630505c8c91461025c578063089208d814610264575b600080fd5b6102086105a5565b604080516001600160a01b039092168252519081900360200190f35b61024a6004803603602081101561023a57600080fd5b50356001600160a01b03166105c9565b60408051918252519081900360200190f35b610208610622565b61026c610632565b005b61026c6004803603608081101561028457600080fd5b508035151590602081013590604081013590606001356106c9565b61026c600480360360408110156102b557600080fd5b5060ff81351690602001356107c1565b61024a600480360360408110156102db57600080fd5b506001600160a01b038135169060200135151561093c565b6102fb610b31565b604080519115158252519081900360200190f35b61026c600480360361010081101561032657600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c08101359060e00135610b41565b61035f610bf3565b60408051951515865260208601949094528484019290925260608401526080830152519081900360a00190f35b61026c600480360360208110156103a257600080fd5b50356001600160a01b0316610c0b565b610208610cf8565b61024a600480360360208110156103d057600080fd5b50356001600160a01b0316610d07565b61026c610d99565b610208610e43565b61024a610e67565b610208610e82565b61024a6004803603602081101561041657600080fd5b5035610e91565b61024a6004803603606081101561043357600080fd5b50803590602081013590604001356001600160a01b0316610eb6565b6102086114ba565b6102086114c9565b6102086114d8565b6102fb6004803603602081101561047d57600080fd5b50356001600160a01b03166114fc565b61026c600480360360408110156104a357600080fd5b506001600160a01b0381358116916020013516611614565b6104e1600480360360208110156104d157600080fd5b50356001600160a01b031661168f565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61024a6116b6565b61026c6004803603604081101561052557600080fd5b506001600160a01b0381351690602001351515611774565b610545611837565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b61024a61184f565b61024a611880565b61024a61191d565b61024a611962565b61024a611968565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806105d583610d07565b6001600160a01b03841660009081526012602052604090205490915061271082106106025780925061061b565b610618612710610612838561196e565b906119ce565b92505b5050919050565b6000546001600160a01b03165b90565b6000546001600160a01b0316331461067f576040805162461bcd60e51b81526020600482018190526024820152600080516020612661833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610716576040805162461bcd60e51b81526020600482018190526024820152600080516020612661833981519152604482015290519081900360640190fd5b60065461072c906103e89061061290601961196e565b831115610776576040805162461bcd60e51b8152602060048201526013602482015272496e6372656d656e7420746f6f206c6172676560681b604482015290519081900360640190fd5b6040805160a0810182529415158086526020860185905290850183905260608501829052436080909501859052600d805460ff19169091179055600e92909255600f55601055601155565b6000546001600160a01b0316331461080e576040805162461bcd60e51b81526020600482018190526024820152600080516020612661833981519152604482015290519081900360640190fd5b600082600481111561081c57fe5b141561086d576127108110156108635760405162461bcd60e51b81526004018080602001828103825260248152602001806126a46024913960400191505060405180910390fd5b6007819055610938565b600182600481111561087b57fe5b14156108e2576103e88111156108d8576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b6009819055610938565b60028260048111156108f057fe5b141561090057600a819055610938565b600382600481111561090e57fe5b141561091e57600b819055610938565b600482600481111561092c57fe5b141561093857600c8190555b5050565b6000610946612597565b506001600160a01b03831660009081526012602090815260408083208151608081018352815481526001820154938101939093526002810154918301919091526003015460608201529061099985610d07565b90506127108110610a29576001600160a01b03851660008181526012602090815260408083208381556001810184905560028101849055600301839055855181519081529182019290925281517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1929181900390910190a2610a2085858460000151611a10565b92505050610b2b565b8151600090610a409061271090610612908561196e565b90506040518060800160405280610a64838660000151611d1390919063ffffffff16565b8152602001610a8e610a83866040015143611d1390919063ffffffff16565b602087015190611d13565b8152436020808301919091526060808701516040938401526001600160a01b038a166000818152601284528490208551808255868501516001830155868601516002830155959092015160039092019190915582518581529182019390935281517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1929181900390910190a2610b25868683611a10565b93505050505b92915050565b600554600160a01b900460ff1681565b6000546001600160a01b03163314610b8e576040805162461bcd60e51b81526020600482018190526024820152600080516020612661833981519152604482015290519081900360640190fd5b6040805160e08101825289815260208101899052908101879052606081018690526080810185905260a0810183905260c001819052600697909755600795909555600893909355600991909155600a55600b91909155600c9190915560135543601455565b600d54600e54600f5460105460115460ff9094169385565b6000546001600160a01b03163314610c58576040805162461bcd60e51b81526020600482018190526024820152600080516020612661833981519152604482015290519081900360640190fd5b6001600160a01b038116610c9d5760405162461bcd60e51b81526004018080602001828103825260268152602001806125d26026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b6000610d11612597565b506001600160a01b03821660009081526012602090815260408083208151608081018352815481526001820154938101939093526002810154918301829052600301546060830152909190610d67904390611d13565b60208301519091508015610d8c57610d85816106128461271061196e565b9350610d91565b600093505b505050919050565b6001546001600160a01b03163314610de25760405162461bcd60e51b81526004018080602001828103825260228152602001806125f86022913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610e7d610e7461191d565b60135490611d13565b905090565b6005546001600160a01b031681565b6000610b2b655af3107a4000610612610eb185610eac61184f565b611d55565b611ecc565b60006001600160a01b038216610f05576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b610f0d611ee4565b600a546013541115610f5d576040805162461bcd60e51b815260206004820152601460248201527313585e0818d85c1858da5d1e481c995858da195960621b604482015290519081900360640190fd5b6000610f67611ef8565b90506000610f73611ef8565b905080851015610fb45760405162461bcd60e51b81526004018080602001828103825260238152602001806126816023913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d1b317e57f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561104b57600080fd5b505afa15801561105f573d6000803e3d6000fd5b505050506040513d602081101561107557600080fd5b50519050600061108482610e91565b9050629896808110156110cf576040805162461bcd60e51b815260206004820152600e60248201526d109bdb99081d1bdbc81cdb585b1b60921b604482015290519081900360640190fd5b6110d7611880565b81111561111c576040805162461bcd60e51b815260206004820152600e60248201526d426f6e6420746f6f206c6172676560901b604482015290519081900360640190fd5b600061113c6127106106126006600501548561196e90919063ffffffff16565b9050600061115d61271061061260068001548661196e90919063ffffffff16565b90506111b46001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f00000000000000000000000000000000000000000000000000000000000000008d611f32565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166356a07a3b7f0000000000000000000000000000000000000000000000000000000000000000866040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561124b57600080fd5b505af115801561125f573d6000803e3d6000fd5b50506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169150636a20de929050306112a9846112a38888611f92565b90611f92565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b505050508160001461134957600254611349906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911684611fec565b801561138957600354611389906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611fec565b6013546113969085611f92565b601355604080516080810182526001600160a01b038a1660009081526012602052919091205481906113c89086611f92565b81526007805460208084019190915243604080850182905260609485018c90526001600160a01b038e16600090815260128452819020865181559286015160018401558501516002830155939092015160039092019190915554879161142d91611f92565b604080518d8152905186917f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae5919081900360200190a461146b6116b6565b611473611ef8565b61147b611ef8565b6040517f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a90600090a46114ac612043565b509098975050505050505050565b6002546001600160a01b031681565b6003546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561153d57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561157c57600080fd5b600254604080516370a0823160e01b8152306004820152905161160c926001600160a01b0390811692908616916370a0823191602480820192602092909190829003018186803b1580156115cf57600080fd5b505afa1580156115e3573d6000803e3d6000fd5b505050506040513d60208110156115f957600080fd5b50516001600160a01b0385169190611fec565b506001919050565b6000546001600160a01b03163314611661576040805162461bcd60e51b81526020600482018190526024820152600080516020612661833981519152604482015290519081900360640190fd5b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055565b60126020526000908152604090208054600182015460028301546003909301549192909184565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561171257600080fd5b505afa158015611726573d6000803e3d6000fd5b505050506040513d602081101561173c57600080fd5b5051905061176e670de0b6b3a7640000610612610eb1611768633b9aca00611762610e67565b9061196e565b85611d55565b91505090565b6000546001600160a01b031633146117c1576040805162461bcd60e51b81526020600482018190526024820152600080516020612661833981519152604482015290519081900360640190fd5b6001600160a01b0382166117d457600080fd5b80156118095760058054600160a01b60ff60a01b19909116176001600160a01b0319166001600160a01b038416179055610938565b6005805460ff60a01b19169055600480546001600160a01b0384166001600160a01b03199091161790555050565b600654600754600854600954600a54600b54600c5487565b600061186c620186a06106126118636116b6565b6006549061196e565b60085490915081101561062f575060085490565b6000610e7d620186a06106126006600301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118eb57600080fd5b505afa1580156118ff573d6000803e3d6000fd5b505050506040513d602081101561191557600080fd5b50519061196e565b60008061193560145443611d1390919063ffffffff16565b60075460135491925061194c91610612908461196e565b915060135482111561195e5760135491505b5090565b60145481565b60135481565b60008261197d57506000610b2b565b8282028284828161198a57fe5b04146119c75760405162461bcd60e51b81526004018080602001828103825260218152602001806126406021913960400191505060405180910390fd5b9392505050565b60006119c783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612123565b600082611ac0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb85846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611a8e57600080fd5b505af1158015611aa2573d6000803e3d6000fd5b505050506040513d6020811015611ab857600080fd5b50611d0c9050565b600554600160a01b900460ff1615611be7576005546040805163095ea7b360e01b81526001600160a01b0392831660048201526024810185905290517f00000000000000000000000000000000000000000000000000000000000000009092169163095ea7b3916044808201926020929091908290030181600087803b158015611b4957600080fd5b505af1158015611b5d573d6000803e3d6000fd5b505050506040513d6020811015611b7357600080fd5b505060055460408051637acb775760e01b8152600481018590526001600160a01b03878116602483015291519190921691637acb775791604480830192600092919082900301818387803b158015611bca57600080fd5b505af1158015611bde573d6000803e3d6000fd5b50505050611d0c565b600480546040805163095ea7b360e01b81526001600160a01b039283169381019390935260248301859052517f00000000000000000000000000000000000000000000000000000000000000009091169163095ea7b39160448083019260209291908290030181600087803b158015611c5f57600080fd5b505af1158015611c73573d6000803e3d6000fd5b505050506040513d6020811015611c8957600080fd5b50506004805460408051637acb775760e01b81529283018590526001600160a01b0387811660248501529051911691637acb77579160448083019260209291908290030181600087803b158015611cdf57600080fd5b505af1158015611cf3573d6000803e3d6000fd5b505050506040513d6020811015611d0957600080fd5b50505b5092915050565b60006119c783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506121c5565b611d5d6125bf565b60008211611d9c5760405162461bcd60e51b815260040180806020018281038252602681526020018061261a6026913960400191505060405180910390fd5b82611db65750604080516020810190915260008152610b2b565b71ffffffffffffffffffffffffffffffffffff8311611e5d57600082607085901b81611dde57fe5b0490506001600160e01b03811115611e3d576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050610b2b565b6000611e6e84600160701b8561221f565b90506001600160e01b03811115611e3d576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b611eef610e7461191d565b60135543601455565b6000611f0c620186a06106126118636116b6565b600854909150811015611f22575060085461062f565b6008541561062f57600060085590565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611f8c9085906122bf565b50505050565b6000828201838110156119c7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261203e9084906122bf565b505050565b6010546011546000916120569190611f92565b600e549091501580159061206a5750804310155b1561212057600654600d5460ff16156120a457600e5460065461208c91611f92565b6006819055600f541161209f576000600e555b6120c6565b600e546006546120b391611d13565b6006819055600f54106120c6576000600e555b43601155600654600e54600d546040805185815260208101949094528381019290925260ff1615156060830152517fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a9181900360800190a1505b50565b600081836121af5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561217457818101518382015260200161215c565b50505050905090810190601f1680156121a15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816121bb57fe5b0495945050505050565b600081848411156122175760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561217457818101518382015260200161215c565b505050900390565b600080600061222e8686612370565b915091506000848061223c57fe5b868809905082811115612250576001820391505b80830392508482106122a9576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b6122b483838761239d565b979650505050505050565b6060612314826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661240d9092919063ffffffff16565b80519091501561203e5780806020019051602081101561233357600080fd5b505161203e5760405162461bcd60e51b815260040180806020018281038252602a8152602001806126c8602a913960400191505060405180910390fd5b6000808060001984860990508385029250828103915082811015612395576001820391505b509250929050565b600081810382168083816123ad57fe5b0492508085816123b957fe5b0494508081600003816123c857fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b606061241c8484600085612424565b949350505050565b606061242f85612591565b612480576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106124bf5780518252601f1990920191602091820191016124a0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612521576040519150601f19603f3d011682016040523d82523d6000602084013e612526565b606091505b5091509150811561253a57915061241c9050565b80511561254a5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561217457818101518382015260200161215c565b3b151590565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040805160208101909152600081529056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572536c697070616765206c696d69743a206d6f7265207468616e206d617820707269636556657374696e67206d757374206265206c6f6e676572207468616e20333620686f7572735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220b25189910f118122f0454bcda712bf045a94e31a35a765453ca2f1e5ee1e63c264736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice()": {
        "returns": {
          "price_": "uint"
        }
      },
      "currentDebt()": {
        "returns": {
          "_0": "uint"
        }
      },
      "debtDecay()": {
        "returns": {
          "decay_": "uint"
        }
      },
      "debtRatio()": {
        "returns": {
          "debtRatio_": "uint"
        }
      },
      "deposit(uint256,uint256,address)": {
        "params": {
          "_amount": "uint",
          "_depositor": "address",
          "_maxPrice": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_controlVariable": "uint",
          "_initialDebt": "uint",
          "_maxDebt": "uint",
          "_maxPayout": "uint",
          "_minimumPrice": "uint",
          "_vestingTerm": "uint"
        }
      },
      "maxPayout()": {
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256)": {
        "params": {
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "pendingPayoutFor(address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "pendingPayout_": "uint"
        }
      },
      "percentVestedFor(address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "percentVested_": "uint"
        }
      },
      "recoverLostToken(address)": {
        "returns": {
          "_0": "bool"
        }
      },
      "redeem(address,bool)": {
        "params": {
          "_recipient": "address",
          "_stake": "bool"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "setAdjustment(bool,uint256,uint256,uint256)": {
        "params": {
          "_addition": "bool",
          "_buffer": "uint",
          "_increment": "uint",
          "_target": "uint"
        }
      },
      "setBondTerms(uint8,uint256)": {
        "params": {
          "_input": "uint",
          "_parameter": "PARAMETER"
        }
      },
      "setStaking(address,bool)": {
        "params": {
          "_helper": "bool",
          "_staking": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bondPrice()": {
        "notice": "calculate current bond premium"
      },
      "currentDebt()": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay()": {
        "notice": "amount to decay total debt by"
      },
      "debtRatio()": {
        "notice": "calculate current ratio of debt to LOBI supply"
      },
      "deposit(uint256,uint256,address)": {
        "notice": "deposit bond"
      },
      "initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "initializes bond parameters"
      },
      "maxPayout()": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256)": {
        "notice": "calculate interest due for new bond"
      },
      "pendingPayoutFor(address)": {
        "notice": "calculate amount of LOBI available for claim by depositor"
      },
      "percentVestedFor(address)": {
        "notice": "calculate how far into vesting a depositor is"
      },
      "recoverLostToken(address)": {
        "notice": "allow anyone to send lost tokens (excluding principle or LOBI) to the DAO"
      },
      "redeem(address,bool)": {
        "notice": "redeem bond for user"
      },
      "setAdjustment(bool,uint256,uint256,uint256)": {
        "notice": "set control variable adjustment"
      },
      "setBondTerms(uint8,uint256)": {
        "notice": "set parameters for new bonds"
      },
      "setStaking(address,bool)": {
        "notice": "set contract for auto stake"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "_newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2268,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "DAO",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2270,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "partnerDAO",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2272,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "staking",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2274,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "stakingHelper",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2276,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "useHelper",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2278,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Terms)2303_storage"
      },
      {
        "astId": 2280,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "adjustment",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Adjust)2323_storage"
      },
      {
        "astId": 2284,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "bondInfo",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(Bond)2312_storage)"
      },
      {
        "astId": 2286,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "totalDebt",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2288,
        "contract": "contracts/LpBondDepository.sol:LpBondDepository",
        "label": "lastDecay",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bond)2312_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LpBondDepository.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)2312_storage"
      },
      "t_struct(Adjust)2323_storage": {
        "encoding": "inplace",
        "label": "struct LpBondDepository.Adjust",
        "members": [
          {
            "astId": 2314,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2316,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2318,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2320,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "buffer",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2322,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "lastBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Bond)2312_storage": {
        "encoding": "inplace",
        "label": "struct LpBondDepository.Bond",
        "members": [
          {
            "astId": 2305,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2307,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "vesting",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2309,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "lastBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2311,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "pricePaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Terms)2303_storage": {
        "encoding": "inplace",
        "label": "struct LpBondDepository.Terms",
        "members": [
          {
            "astId": 2290,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2292,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2294,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2296,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2298,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2300,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "fee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2302,
            "contract": "contracts/LpBondDepository.sol:LpBondDepository",
            "label": "feePartner",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}